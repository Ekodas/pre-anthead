###########################################################################
# Helper macro that will walk the user through a cold-pull
#
# Assumes the bowden tube is removed from the toolhead and the extruder
# is loaded with about a 300mm piece of filament. The user should have access
# to the filament to assist pull when asked
#
# Params:
#  MATERIAL=nylon|pla|abs|petg	Starting temp defaults
#  HOT_TEMP			Initial high temp
#  COLD_TEMP			Temp to cool too to help release filament
#  MIN_EXTRUDE_TEMP		Temp to which the extruder will keep nozzle pressurized
#  PULL_TEMP			Temp to perform the cold pull
#  PULL_SPEED			Speed in mm/s of extruder movement to help manual pull
#  CLEAN_LENGTH			Amount of filament to extrude to prime extruder/nozzle
#  EXTRUDE_SPEED		Speed in mm/s to perform extrude operations
#
[gcode_macro COLD_PULL]
description: Guide you through the process of cleaning your extruder with a cold pull
gcode:
    {% set material = params.MATERIAL|default("pla")|string|upper %}
    {% set materials = {
        'NYLON': {'hot_temp': 260, 'cold_temp': 50, 'pull_temp': 120, 'min_extrude_temp': 190},
        'PLA':   {'hot_temp': 250, 'cold_temp': 45, 'pull_temp': 100, 'min_extrude_temp': 160},
        'ABS':   {'hot_temp': 255, 'cold_temp': 50, 'pull_temp': 120, 'min_extrude_temp': 190},
        'PETG':  {'hot_temp': 250, 'cold_temp': 45, 'pull_temp': 100, 'min_extrude_temp': 180}
    } %}
    {% if material not in materials %}
        {action_raise_error("Unknown material. Valid types are: Nylon, ABS, PLA, PETG")}
    {% endif %}

    # Allow individual temperature overrides. Coded like this so Mainsail can parse options
    {% set hot_temp = params.HOT_TEMP|default('')|int %}
    {% set cold_temp = params.COLD_TEMP|default('')|int %}
    {% set pull_temp = params.PULL_TEMP|default('')|int %}
    {% set min_extrude_temp = params.MIN_EXTRUDE_TEMP|default('')|int %}
    {% set hot_temp = (hot_temp if hot_temp > 0 else materials.get(material).hot_temp)|int %}
    {% set cold_temp = (cold_temp if cold_temp > 0 else materials.get(material).cold_temp)|int %}
    {% set pull_temp = (pull_temp if pull_temp > 0 else materials.get(material).pull_temp)|int %}
    {% set min_extrude_temp = (min_extrude_temp if min_extrude_temp > 0 else materials.get(material).min_extrude_temp)|int %}

    {% set pull_speed = params.PULL_SPEED|default(10)|int %}
    {% set clean_length = params.CLEAN_LENGTH|default(25)|int %}
    {% set extrude_speed = params.EXTRUDE_SPEED|default(1.5)|float %}

    {% set ns = namespace(stuff_points=[], cool_points=[]) %}

    {% for temp in range(hot_temp + 1, cold_temp - 1, -1) %}
        {% if temp % 10 == 0 %}
            {% if temp > min_extrude_temp %}
                {% set ns.stuff_points = ns.stuff_points + [temp] %}
            {% elif temp < min_extrude_temp %}
                {% set ns.cool_points = ns.cool_points + [temp] %}
            {% endif %}
        {% endif %}
    {% endfor %}

    MMU_LOG MSG='{"Cold Pull based on %s profile (use MATERIAL= to adjust):" % material}'
    MMU_LOG MSG='{"pull_temp=%d\u00B0C, hot_temp=%d\u00B0C, min_extruder=%d\u00B0C, cold_temp=%d\u00B0C" % (pull_temp, hot_temp, min_extrude_temp, cold_temp)}'

    MMU_LOG MSG='{"Heating extruder to %d\u00B0C..." % hot_temp}'
    SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={hot_temp}
    TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={hot_temp - 2} MAXIMUM={hot_temp + 2}

    # Ensure the nozzle id completely full
    MMU_LOG MSG="Cleaning nozzle tip with {clean_length}mm of filament"
    _MMU_STEP_MOVE MOTOR="extruder" MOVE={clean_length} SPEED={extrude_speed} ALLOW_BYPASS=1

    # Begin the cooling ramp
    MMU_LOG MSG="Allowing extruder to cool..."
    SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={cold_temp}
    M106 S255			# 100% part fan to cool faster

    # While filament can still extrude keep the nozzle completely full
    {% for temp in ns.stuff_points %}
        TEMPERATURE_WAIT SENSOR="extruder" MAXIMUM={temp}
        MMU_LOG MSG='{"> Stuffing nozzle at %d\u00B0C" % temp}'
        _MMU_STEP_MOVE MOTOR="extruder" MOVE=1 SPEED={extrude_speed} ALLOW_BYPASS=1
    {% endfor %}

    # Give some feedback on cooling process
    MMU_LOG MSG='{"Waiting for extruder to completely cool to %d\u00B0C..." % cold_temp}'
    {% for temp in ns.cool_points %}
        TEMPERATURE_WAIT SENSOR="extruder" MAXIMUM={temp}
        MMU_LOG MSG='{"> Nozzle at %d\u00B0C" % temp}'
    {% endfor %}
    TEMPERATURE_WAIT SENSOR="extruder" MAXIMUM={cold_temp}

    # Re-warm
    M107			# Part fan off
    MMU_LOG MSG='{"Re-warming extruder to %d\u00B0C" % pull_temp}'
    SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={pull_temp}

    # The manual cold-pull
    TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={pull_temp - 10}
    MMU_LOG MSG="Get ready to pull..."
    TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={pull_temp}
    MMU_LOG MSG=">>>>> PULL NOW <<<<<"

    # Retract 150 mm at moderate speed (user should assist pull too, especially in bypass))
    _MMU_STEP_MOVE MOTOR="extruder" MOVE=-150 SPEED={pull_speed} ALLOW_BYPASS=1

    MMU_LOG MSG="Cold pull is successful if you can see the shape of the nozzle at the filament end"
    MMU_LOG MSG="If not, try again, perhaps with tweaked temperatures"

    # Heater completely off
    SET_HEATER_TEMPERATURE HEATER="extruder"